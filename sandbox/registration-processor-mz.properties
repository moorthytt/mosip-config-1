####################################################################################################
#---------------------------------------- COMMON PROPERTIES ----------------------------------------
####################################################################################################

dmz.ingress.base.url=http://dmz.ingress:30080

# Database Host name
mosip.registration.processor.database.hostname=postgres
# Database Port
mosip.registration.processor.database.port=80

# The military zone(mz) and demilitarized zone(dmz)
registration.processor.zone=mz

# Health checker
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info,health,refresh

# DB connection
# Driver name
javax.persistence.jdbc.driver=org.postgresql.Driver
# Database connection URL
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.registration.processor.database.hostname}:${mosip.registration.processor.database.port}/mosip_regprc?currentSchema=regprc
javax.persistence.jdbc.user=regprcuser
javax.persistence.jdbc.password={cipher}6cbd7358f7a821132862475c16cf48e575c8e2c5f994fa7140ee08f364015b24

#Hibernate properties
hibernate.hbm2ddl.auto=none
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.show_sql=false

# Landing zone location where packets are stored
registration.processor.LANDING_ZONE = /mnt/regproc/landing

#workel pool size to process multiple requests parallely 
worker.pool.size=10

# main processor used in stages
registration.processor.main-processes=NEW,UPDATE,LOST,RES_UPDATE,ACTIVATE,DEACTIVATE
# sub processor used in stages
registration.processor.sub-processes=BIOMETRIC_CORRECTION

#-------------------------------------------TOKEN GENERATION---------------------------------------#

#Token generation request id
token.request.id=io.mosip.registration.processor
#Token generation app id
token.request.appid=regproc
#Token generation version
token.request.version=1.0
#Token generation Client Id
token.request.clientId=mosip-regproc-client
#Token generation secret key
token.request.secretKey={cipher}215f555ae8266e12fed8144620b34fa3f2be2f805a3d28f9e0cfca3e777d18db
#Token generation issuer url
# Token generation issuer url. NOTE: The url here must match the one mentioned in keycloak auth token, otherwise
# performance of system will be severly affected.
token.request.issuerUrl=${mosipbox.public.url}/keycloak/auth/realms/mosip

#----------------------------------Registration processor rest client API's------------------------#

#Audit Service
AUDIT=http://kernel-auditmanager-service/v1/auditmanager/audits

#Auth Service
authmanager.base.url=http://kernel-auth-service
KEYBASEDTOKENAPI=${authmanager.base.url}/v1/authmanager/authenticate/clientidsecretkey
TOKENVALIDATE=${authmanager.base.url}/v1/authmanager/authorize/admin/validateToken
GETRIDFROMUSERID=${authmanager.base.url}/v1/authmanager/rid
GETINDIVIDUALIDFROMUSERID=${authmanager.base.url}/v1/authmanager/individualId
INTERNALAUTH=http://ida-internal-service/idauthentication/v1/internal/auth

#Master Data Services
MASTER=http://kernel-masterdata-service/v1/masterdata
MACHINEHISTORY=${MASTER}/machineshistories
CENTERHISTORY=${MASTER}/registrationcentershistory
CENTERUSERMACHINEHISTORY=${MASTER}/getregistrationmachineusermappinghistory
REVERSEDATASYNC=http://prereg-datasync-service/preregistration/v1/sync/consumedPreRegIds
CENTERDETAILS=${MASTER}/registrationcenters
MACHINEDETAILS=${MASTER}/machines
DEVICESHISTORIES=${MASTER}/deviceshistories
REGISTRATIONCENTERDEVICEHISTORY=${MASTER}/registrationcenterdevicehistory
REGISTRATIONCENTERTIMESTAMP=${MASTER}/registrationcenters/validate
USERDETAILS=${MASTER}/users
TEMPLATES=${MASTER}/templates
DEVICEVALIDATEHISTORY=http://pms-partner-manager-service/v1/partnermanager/deviceprovidermanagement/validate
#To get the idschema from masterdata db
IDSCHEMA=${MASTER}/idschema/latest

#ID Repository Services
IDREPOSITORY=http://idrepo-identity-service/idrepository/v1/identity/
IDREPOGETIDBYUIN=http://idrepo-identity-service/idrepository/v1/identity/idvid
UINGENERATOR=http://kernel-idgenerator-service/v1/idgenerator/uin
RETRIEVEIDENTITYFROMRID=http://idrepo-identity-service/idrepository/v1/identity/idvid
RETRIEVEIDENTITY=http://idrepo-identity-service/idrepository/v1/identity/idvid
CREATEVID=http://idrepo-vid-service/idrepository/v1/vid
GETUINBYVID=http://idrepo-vid-service/idrepository/v1/idvid
CREDENTIALREQUEST=http://idrepo-credential-request-generator/v1/credentialrequest/requestgenerator
GETVIDSBYUIN=http://idrepo-vid-service/idrepository/v1/vid/uin
IDREPOHASDRAFT=http://idrepo-identity-service/idrepository/v1/identity/draft
IDREPOGETDRAFT=http://idrepo-identity-service/idrepository/v1/identity/draft
IDREPOCREATEDRAFT=http://idrepo-identity-service/idrepository/v1/identity/draft/create
IDREPOUPDATEDRAFT=http://idrepo-identity-service/idrepository/v1/identity/draft/update
IDREPOPUBLISHDRAFT=http://idrepo-identity-service/idrepository/v1/identity/draft/publish
IDREPOEXTRACTBIOMETRICS=http://idrepo-identity-service/idrepository/v1/identity/draft/extractbiometrics/

#Encrypt Services
ENCRYPTURL=http://kernel-keymanager-service/v1/keymanager/encrypt
ENCRYPTIONSERVICE=http://kernel-keymanager-service/v1/keymanager/publickey

#Digital Signature Service
DIGITALSIGNATURE=http://kernel-keymanager-service/v1/keymanager/sign
JWTVERIFY=http://kernel-keymanager-service/v1/keymanager/jwtVerify
# Validate hostlisted devices
DEVICEHOTLIST=http://admin-hotlist-service/v1/hotlist

# Url from where packets need to be picked up DMZ (landing zone)
NGINXDMZURL=${dmz.ingress.base.url}/registrationprocessor/v1/dmzpacketserver

CRYPTOMANAGERDECRYPT=http://kernel-keymanager-service/v1/keymanager/decrypt

# this property is used in lostrid api to get postal code
mosip.registration.processor.postalcode.req.url=${MASTER}/registrationcenters

#SMS and EMAIL notification services
SMSNOTIFIER=http://kernel-notification-service/v1/notifier/sms/send
EMAILNOTIFIER=http://kernel-notification-service/v1/notifier/email/send

PMS=http://pms-policy-manager-service/v1/policymanager/policies
PARTNERGETBIOEXTRACTOR=http://pms-partner-manager-service/v1/partnermanager/partners

# ID Authentication 
IDAUTHENCRYPTION=http://ida-internal-service/idauthentication/v1/internal/encrypt
IDAUTHPUBLICKEY=http://ida-internal-service/idauthentication/v1/internal/publickey
IDAUTHCERTIFICATE=http://ida-internal-service/idauthentication/v1/internal/getCertificate
ida-internal-auth-uri=http://ida-internal-service/idauthentication/v1/internal/auth
ida-internal-get-certificate-uri=http://ida-internal-service/idauthentication/v1/internal/getCertificate

# packetmanager APIs
packetmanager.base.url=http://packetmanager-service.packetmanager:80/commons
PACKETMANAGER_SEARCH_FIELD=${packetmanager.base.url}/v1/packetmanager/searchField
PACKETMANAGER_SEARCH_FIELDS=${packetmanager.base.url}/v1/packetmanager/searchFields
PACKETMANAGER_SEARCH_METAINFO=${packetmanager.base.url}/v1/packetmanager/metaInfo
PACKETMANAGER_VALIDATE=${packetmanager.base.url}/v1/packetmanager/validatePacket
PACKETMANAGER_SEARCH_DOCUMENT=${packetmanager.base.url}/v1/packetmanager/document
PACKETMANAGER_SEARCH_BIOMETRICS=${packetmanager.base.url}/v1/packetmanager/biometrics
PACKETMANAGER_SEARCH_AUDITS=${packetmanager.base.url}/v1/packetmanager/audits
PACKETMANAGER_INFO=${packetmanager.base.url}/v1/packetmanager/info
PACKETMANAGER_GET_TAGS=${packetmanager.base.url}/v1/packetmanager/getTags
PACKETMANAGER_UPDATE_TAGS=${packetmanager.base.url}/v1/packetmanager/addOrUpdateTag
PACKETMANAGER_DELETE_TAGS=${packetmanager.base.url}/v1/packetmanager/deleteTag
DATASHARECREATEURL=/v1/datashare/create
DATASHAREGETEURL=http://datashare-service/v1/datashare/get

#Digital Signature Id
mosip.registration.processor.digital.signature.id=io.mosip.registration.processor

#Status for matched records in demo dedupe stage.
# 'REJECTED' will automatically reject packets failed in demo dedupe. It will not be sent for manual verification.
registration.processor.demodedupe.manualverification.status=REJECTED

packet.info.storage.service=*
config.server.file.storage.uri=${spring.cloud.config.uri}/${packet.info.storage.service}/${spring.profiles.active}/${spring.cloud.config.label}/

#Applicant date of birth format
registration.processor.applicant.dob.format=yyyy/MM/dd
#Internal Auth request id
mosip.identity.auth.internal.requestid=mosip.identity.auth.internal
mosip.kernel.device.validate.history.id=""
#Internal Auth env
mosip.identity.auth.internal.env=Staging
#UMC configuarble
crypto.PrependThumbprint.enable=true
auth.PrependThumbprint.enable=false

#Request time grace period
mosip.registration.processor.grace.period=10800

#Packet receiver application version
mosip.registration.processor.application.version=1.0
#Request Date Time format
mosip.registration.processor.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
#Request Date Timezone
mosip.registration.processor.timezone=GMT

#---------Virus Scanner ---------
#Virus scanner packet extension
registration.processor.packet.ext=.zip
#Virus scanner server host
mosip.kernel.virus-scanner.host=clamav
#Virus scanner port
mosip.kernel.virus-scanner.port=80
# virus scanner provider to be passed during runtime. This property will load provider during startup
mosip.regproc.virusscanner.provider=io.mosip.kernel.virusscanner.clamav.impl.VirusScannerImpl
#Virus scanner application request id
registration.processor.application.id=REGISTRATION
registration.processor.rid.machineidsubstring=10

#Mapping Identity json to map with the applicant id json
registration.processor.identityjson=identity-mapping.json
#Abis queue configuration json
registration.processor.abis.json=registration-processor-abis.json
#Demographic identity label
registration.processor.demographic.identity=identity

#---------------------------------------------Queue------------------------------------------------#

#Queue username
registration.processor.queue.username=admin
#Queue Password
registration.processor.queue.password={cipher}3c7b6d545f11105e9a9a7e1d4dfd7829662d73c713576a877536ac783921c9f0
#Queue Url
registration.processor.queue.url=tcp://activemq:80
#Type of the Queue
registration.processor.queue.typeOfQueue=ACTIVEMQ
# queue name where mosip will send request to external mv system
registration.processor.queue.manualverification.request=mosip-to-mv
# queue name where mosip will receive response from external mv system
registration.processor.queue.manualverification.response=mv-to-mosip

#Service Ids
#Audit request id
mosip.registration.processor.audit.id=mosip.applicanttype.getApplicantType
#Cryptomanager decrypt request id
mosip.registration.processor.crypto.decrypt.id=mosip.cryptomanager.decrypt

#Kernel Crypto signature
registration.processor.signature.isEnabled=true

# perform infant dedupe in demo and bio dedupe stage. Accepted values - 'Y', 'N'
registration.processor.infant.dedupe=N

mosip.regproc.data.share.internal.domain.name=datashare-service
mosip.regproc.data.share.protocol=http

#iam adapter
mosip.auth.adapter.impl.basepackage=io.mosip.kernel.auth.defaultadapter

packetmanager.name.source.resident=RESIDENT
packetmanager.name.source.cnie=CNIE
packetmanager.name.source.default=REGISTRATION_CLIENT
object.store.s3.use.account.as.bucketname=true

#After this time intervel, message should be considered as expired (In seconds), 
# value as 0 and negative will disable message expiry checks
mosip.regproc.common.stage.message.expiry-time-limit=3600

#--------------------------------------------Event Bus---------------------------------------------#

#Supported eventbus types: vertx, kafka. Defaults to vertx if the config is not given
mosip.regproc.eventbus.type=kafka

#Kafka event bus config, will be used only when the type is kafka
#Kafka cluster servers comma separated, common for all stages and camel
mosip.regproc.eventbus.kafka.bootstrap.servers=kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092

# Stage Group Configuratoins
# Default base packages for stage beans to be scanned in a stage group
mosip.regproc.mosip-stage-executor.stage-beans-base-packages.default=io.mosip.registration.processor,io.mosip.registrationprocessor,io.mosip.registartion.processor
# Add any new base package of Stage bean specific to stage group as below
# mosip.regproc.stage-groups.stage-beans-base-packages.<stage_group_name>=${mosip.regproc.stage-groups.stage-beans-base-packages.default}
# Example: mosip.regproc.stage-groups.stage-beans-base-packages.stage-group-1=${mosip.regproc.stage-groups.stage-beans-base-packages.default},my.stage.bean.base.package


#----------------------------------------Bio SDK Integration---------------------------------------#

mosip.biosdk.default.host=http://mock-biosdk-service.default:80
mosip.biosdk.default.service.url=${mosip.biosdk.default.host}/biosdk-service

# The fully qualified Class Name of the BIO SDK API implemented for Finger modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.provider.finger.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Finger modality
mosip.biometric.sdk.provider.finger.version=0.9
mosip.biometric.sdk.provider.finger.format.url.mock-1.1=${mosip.biosdk.default.service.url}
# The default URL will be taken if no format specified in the extraction or the incoming extraction format is not configured. 
# If the below default configuration is not configured, the one of the configured url will be used as the default URL. 
# If no URL is configured, the default URL will be taken from the environment variable 'mosip_biosdk_service'.
mosip.biometric.sdk.provider.finger.format.url.default=${mosip.biosdk.default.service.url}

# The fully qualified Class Name of the BIO SDK API implemented for Iris modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.provider.iris.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Iris modality
mosip.biometric.sdk.provider.iris.version=0.9
mosip.biometric.sdk.provider.iris.format.url.mock-1.1=${mosip.biosdk.default.service.url}

# The fully qualified Class Name of the BIO SDK API implemented for Face modality 
# This class will be loaded in runtime, the containing jar should be available in classpath
mosip.biometric.sdk.provider.face.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
# The version of the BIO SDK API implemeted for Face modality
mosip.biometric.sdk.provider.face.version=0.9
mosip.biometric.sdk.provider.face.format.url.mock-1.1=${mosip.biosdk.default.service.url}

# salt generation properties
mosip.regproc.db.url=${javax.persistence.jdbc.url}
mosip.regproc.db.username=${javax.persistence.jdbc.user}
mosip.regproc.db.password=${javax.persistence.jdbc.password}
mosip.regproc.db.driverClassName=${javax.persistence.jdbc.driver}
mosip.kernel.salt-generator.chunk-size=10
mosip.kernel.salt-generator.start-sequence=0
mosip.kernel.salt-generator.end-sequence=9999
mosip.kernel.salt-generator.db.key-alias=mosip.regproc.db
mosip.kernel.salt-generator.schemaName=regprc
mosip.kernel.salt-generator.tableName=crypto_salt

# List of old reg client versions with others attribute not present but currently supported for registration, this is required to take care of the backward compatibility checks
mosip.regproc.common.before-cbeff-others-attibute.reg-client-versions=1.1.3,1.1.4,1.1.5

####################################################################################################
#------------------------------------ WORKFLOW ENGINE PROPERTIES -----------------------------------
####################################################################################################

#-----------------------------------------reprocessor----------------------------------------#

mosip.regproc.reprocessor.eventbus.kafka.commit.type=single
mosip.regproc.reprocessor.eventbus.kafka.max.poll.records=100
mosip.regproc.reprocessor.eventbus.kafka.poll.frequency=100
mosip.regproc.reprocessor.eventbus.kafka.group.id=reprocessor-stage

mosip.regproc.reprocessor.server.port=8021
mosip.regproc.reprocessor.eventbus.port=5750
mosip.regproc.reprocessor.server.servlet.path=/registrationprocessor/v1/reprocessor

#Number of the reprocess records to be fetched at a time
registration.processor.reprocess.fetchsize=100

registration.processor.reprocess.limit=500
registration.processor.pause.packets.for.backpressure=true

# The reprocessor scheduler configurations
# The elapse time (in sec) beyond which the rids will be considered for reprocessing
registration.processor.reprocess.elapse.time=7200
# The maximum reprocess count. Beyond this the rid will not be considered for reprocessing.
registration.processor.reprocess.attempt.count=300
# Reprocess type
registration.processor.reprocess.type=cron
#schedular seconds configuration
registration.processor.reprocess.seconds=0
#schedular minutes configuration
#the frequency for reprocess has been updated to every 5 minutes for resume feature
registration.processor.reprocess.minutes=0,5,10,15,20,25,30,35,40,45,50,55
#schedular hours configuration
registration.processor.reprocess.hours=*
#schedular days configuration
registration.processor.reprocess.days_of_month=*
#schedular months configuration
registration.processor.reprocess.months=*
#schedular weeks configuration
registration.processor.reprocess.days_of_week=*

#----------------------------------------workflow-manager-service----------------------------------#

# WorkflowAction api id
mosip.regproc.workflow-manager.action.api-id=mosip.registration.processor.workflow.action
# WorkflowAction api version
mosip.regproc.workflow-manager.action.version=1.0
# WorkflowSearch api id
mosip.regproc.workflow-manager.search.api-id=mosip.registration.processor.workflow.search
# WorkflowSearch api version
mosip.regproc.workflow-manager.search.version=v1
#WorkflowAction service  beginning stage name
mosip.regproc.workflow-manager.action.resumefrombeginning.stage=PacketUploaderStage
#WorkflowAction service  websub topic name
mosip.regproc.workflow.complete.topic=registration_processor_workflow_completed_event
#Number of the WorkflowAction job records to be fetched at a time
mosip.regproc.workflow-manager.action.job.fetchsize=100
#Maximum  number of iterations allowed for pause and request additional info default
mosip.regproc.workflow-manager.internal.action.max-allowed-iteration=5
#Maximum  number of iterations allowed for pause and request additional info for BIOMETRIC_CORRECTION
mosip.regproc.workflow-manager.internal.action.max-allowed-iteration.BIOMETRIC_CORRECTION=5

# The  WorkflowAction  scheduler configurations
# WorkflowAction scheduler type
mosip.regproc.workflow-manager.action.job.type=cron
#schedular seconds configuration
mosip.regproc.workflow-manager.action.job.seconds=*
#schedular minutes configuration
mosip.regproc.workflow-manager.action.job.minutes=0,5,10,15,20,25,30,35,40,45,50,55
#schedular hours configuration
mosip.regproc.workflow-manager.action.job.hours=*
#schedular days configuration
mosip.regproc.workflow-manager.action.job.days_of_month=*
#schedular months configuration
mosip.regproc.workflow-manager.action.job.months=*
#schedular weeks configuration
mosip.regproc.workflow-manager.action.job.days_of_week=*

mosip.regproc.workflow.action.job.server.port=8026
mosip.regproc.workflow.action.job.eventbus.port=5754
mosip.regproc.workflow.acfegsffgdgtion.job.server.servlet.path=/registrationprocessor/v1/workflowmanager

mosip.regproc.workflow.action.job.eventbus.kafka.commit.type=single
mosip.regproc.workflow.action.job.eventbus.kafka.max.poll.records=100
mosip.regproc.workflow.action.job.eventbus.kafka.poll.frequency=100
mosip.regproc.workflow.action.job.eventbus.kafka.group.id=workflow-manager-service

#Event bus address for anonymous profile
mosip.anonymous.profile.eventbus.address=anonymous-profile-bus-in

mosip.regproc.workflow.manager.eventbus.kafka.commit.type=single
mosip.regproc.workflow.manager.eventbus.kafka.max.poll.records=100
mosip.regproc.workflow.manager.eventbus.kafka.poll.frequency=100
mosip.regproc.workflow.manager.eventbus.kafka.group.id=workflow-manager
mosip.regproc.workflow.manager.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#------------------------------------------camel-bridge--------------------------------------------#

mosip.regproc.camel.bridge.eventbus.kafka.commit.type=single
mosip.regproc.camel.bridge.eventbus.kafka.max.poll.records=100
mosip.regproc.camel.bridge.eventbus.kafka.poll.frequency=100
#Above 3 camel kafka config will have no effect, it is kept because MosipBridgeFactory extends 
#MosipVerticleAPIManager
mosip.regproc.camel.bridge.eventbus.kafka.group.id=camel-brdige-mz

mosip.regproc.camelbridge.pause-settings=[{"ruleId" :"NON_RESIDENT_CHILD_APPLICANT","matchExpression": "$.tags[?(@['AGE_GROUP']== 'CHILD' && @['ID_OBJECT-residenceStatus'] == 'nonResident')]","pauseFor": 600,"defaultResumeAction": "RESUME_PROCESSING","fromAddress": "eventbus://packet-classifier-new-bus-out","ruleDescription" : "Non resident child applicant packet"},{"ruleId" :"HOTLISTED_OPERATOR","matchExpression": "$.tags[?(@['HOTLISTED'] == 'operator')]","pauseFor": 432000,"defaultResumeAction": "STOP_PROCESSING","fromAddress": ".*","ruleDescription" : "Packet created by hotlisted operator"}]
mosip.regproc.camelbridge.endpoint-prefix=eventbus://

####################################################################################################
#------------------------------------ REGPROC SERVICES PROPERTIES ----------------------------------
####################################################################################################

#-----------------------------------------Registration Status--------------------------------------#

#Maximum retry count for packet. Used in packet uploader and registration status.
registration.processor.max.retry=10
#Registration Status Id
mosip.registration.processor.registration.status.id=mosip.registration.status
#Registration Sync Id
mosip.registration.processor.registration.sync.id=mosip.registration.sync
#Registration Transaction Id
mosip.registration.processor.registration.transaction.id=mosip.registration.transaction
# lostRid Id
mosip.registration.processor.lostrid.id=mosip.registration.lostrid
#Registration Sync Version
mosip.registration.processor.sync.version=1.0
#Registration Status Version
mosip.registration.processor.registration.status.version=1.0
#Registration Transaction Version
mosip.registration.processor.transaction.version=1.0
# lostRid version
mosip.registration.processor.lostrid.version=1.0
#registration transaction api controller assigned roles
mosip.role.registration.getGetsearchrid=REGISTRATION_PROCESSOR,REGISTRATION_ADMIN

#-----------------------------------------Notification service-------------------------------------#
# Notification service subscriber secret key for completed event
registration.processor.notification_service_subscriber_secret={cipher}1b1c1a60abf045c34fff60457976178e5c70c949634ad568f5a5510007bfa438
# Notification service callback url  for completed event
registration.processor.notification_service_subscriber_callback_url=${mosipbox.public.url}/registrationprocessor/v1/notification/callback/notify
# Notification service subscriber secret key for pausedforadditonalinfo event
registration.processor.notification_service_pausedforadditonalinfo_subscriber_secret={cipher}1b1c1a60abf045c34fff60457976178e5c70c949634ad568f5a5510007bfa438
# Notification service topic for completed event
mosip.regproc.workflow.pausedforadditionalinfo.topic=registration_processor_workflow_paused_for_additional_info_event
# Notification service callback url  for pausedforadditonalinfo event
registration.processor.notification_service_pausedforadditonalinfo_subscriber_callback_url=${mosipbox.public.url}/registrationprocessor/v1/notification/callback/notifyPausedForAdditionalInfo

# Email template code for PauseForAdditionalInfo
mosip.regproc.notification_service.biometric_correction.email=RPR_PAUSED_FOR_ADD_INFO_EMAIL
# SMS template code for PauseForAdditionalInfo
mosip.regproc.notification_service.biometric_correction.sms=RPR_PAUSED_FOR_ADD_INFO_SMS
# SUBJECT template code for PauseForAdditionalInfo
mosip.regproc.notification_service.biometric_correction.subject=Requesting the additional details for progressing on the application of UIN

regproc.notification.template.code.lost.uin.email=RPR_LOST_UIN_EMAIL
regproc.notification.template.code.lost.uin.sms=RPR_LOST_UIN_SMS
regproc.notification.template.code.lost.uin.sub=RPR_UIN_GEN_EMAIL_SUB
regproc.notification.template.code.uin.created.email=RPR_UIN_GEN_EMAIL
regproc.notification.template.code.uin.created.sms=RPR_UIN_GEN_SMS
regproc.notification.template.code.uin.created.sub=RPR_UIN_GEN_EMAIL_SUB
regproc.notification.template.code.uin.new.email=RPR_UIN_UPD_EMAIL
regproc.notification.template.code.uin.new.sms=RPR_UIN_UPD_SMS
regproc.notification.template.code.uin.new.sub=RPR_UIN_UPD_EMAIL_SUB
regproc.notification.template.code.uin.activate.email=RPR_UIN_REAC_EMAIL
regproc.notification.template.code.uin.activate.sms=RPR_UIN_REAC_SMS
regproc.notification.template.code.uin.activate.sub=RPR_UIN_REAC_EMAIL_SUB
regproc.notification.template.code.uin.deactivate.email=RPR_UIN_DEAC_EMAIL
regproc.notification.template.code.uin.deactivate.sms=RPR_UIN_DEAC_SMS
regproc.notification.template.code.uin.deactivate.sub=RPR_UIN_DEAC_EMAIL_SUB
regproc.notification.template.code.uin.update.email=RPR_UIN_UPD_EMAIL
regproc.notification.template.code.uin.update.sms=RPR_UIN_UPD_SMS
regproc.notification.template.code.uin.update.sub=RPR_UIN_UPD_EMAIL_SUB
regproc.notification.template.code.duplicate.uin.email=RPR_DUP_UIN_EMAIL
regproc.notification.template.code.duplicate.uin.sms=RPR_DUP_UIN_SMS
regproc.notification.template.code.duplicate.uin.sub=RPR_DUP_UIN_EMAIL_SUB
regproc.notification.template.code.technical.issue.email=RPR_TEC_ISSUE_EMAIL
regproc.notification.template.code.technical.issue.sms=RPR_TEC_ISSUE_SMS
regproc.notification.template.code.technical.issue.sub=RPR_TEC_ISSUE_EMAIL_SUB
regproc.notification.template.code.paused.for.additional.info.email=RPR_PAUSED_FOR_ADD_INFO_EMAIL
regproc.notification.template.code.paused.for.additional.info.sms=RPR_PAUSED_FOR_ADD_INFO_SMS
regproc.notification.template.code.paused.for.additional.info.sub=RPR_PAUSED_FOR_ADD_INFO_EMAIL_SUB

#------------------------------- Mock Manual Verification Properties-------------------------------# 

# Based on value of below parameter the packets are passed or rejected. Required values are [APPROVED or REJECTED]
# NOTE : This is a mock property and should be removed during production deployment.
mock.mv.decision=APPROVED

####################################################################################################
#------------------------------------- STAGE SPECIFIC PROPERTIES -----------------------------------
####################################################################################################

#-------------------------------------securezone-notification-stage--------------------------------#

#Supported commmit config: auto, batch, single
mosip.regproc.securezone.notification.eventbus.kafka.commit.type=single
#Maximum records that can be received in one poll to kafka
mosip.regproc.securezone.notification.eventbus.kafka.max.poll.records=100
#Interval between each poll calls to kafka in milli sec
mosip.regproc.securezone.notification.eventbus.kafka.poll.frequency=100
#kafka consumer group id, one unique id is required for for every stage
mosip.regproc.securezone.notification.eventbus.kafka.group.id=securezone-notification-stage
mosip.regproc.securezone.notification.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.securezone.notification.server.port=8090
mosip.regproc.securezone.notification.server.servlet.path=/registrationprocessor/v1/securezone
mosip.regproc.securezone.notification.eventbus.port=5712

mosip.regproc.securezone.notification.message.tag.loading.disable=true

#Route files corresponding to the secure flow
camel.secure.active.flows.file.names=registration-processor-camel-routes-new-mz.xml,registration-processor-camel-routes-update-mz.xml,registration-processor-camel-routes-activate-mz.xml,registration-processor-camel-routes-res-update-mz.xml,registration-processor-camel-routes-deactivate-mz.xml,registration-processor-camel-routes-lost-mz.xml,registration-processor-camel-routes-res-reprint-mz.xml,registration-processor-camel-routes-biometric-correction-mz.xml

#-----------------------------------------packet-uploader-stage------------------------------------#

mosip.regproc.packet.uploader.eventbus.kafka.commit.type=single
mosip.regproc.packet.uploader.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.uploader.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.uploader.eventbus.kafka.group.id=packet-uploader-stage
mosip.regproc.packet.uploader.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

packet.uploader.stage=registration-processor-packet-uploader-stage

mosip.regproc.packet.uploader.server.port=8087
mosip.regproc.packet.uploader.server.servlet.path=/registrationprocessor/v1/uploader
mosip.regproc.packet.uploader.eventbus.port=5714

registration.processor.objectstore.adapter.name=S3Adapter

#-----------------------------------------packet-validator-stage-----------------------------------#

mosip.regproc.packet.validator.eventbus.kafka.commit.type=single
mosip.regproc.packet.validator.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.validator.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.validator.eventbus.kafka.group.id=packet-validator-stage
mosip.regproc.packet.validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.packet.validator.server.port=8088
mosip.regproc.packet.validator.eventbus.port=5715
mosip.regproc.packet.validator.server.servlet.path=/registrationprocessor/v1/packetvalidator

mosip.kernel.jsonvalidator.property-source=APPLICATION_CONTEXT
mosip.kernel.jsonvalidator.schema-name=mosip-identity-json-schema.json
mosip.kernel.jsonvalidator.file-storage-uri=${spring.cloud.config.uri}/${spring.application.name}/${spring.profiles.active}/${spring.cloud.config.label}/

# TO enable applicant document validation
mosip.regproc.packet.validator.validate-applicant-document=true
registration.processor.applicant.type=applicanttype-document-mapping.json
# TO enable applicant document validation processes
mosip.regproc.packet.validator.validate-applicant-document.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION

regproc.packet.validator.notification.template.code.new.reg.email=RPR_RPV_SUC_EMAIL
regproc.packet.validator.notification.template.code.new.reg.sms=RPR_RPV_SUC_SMS
regproc.packet.validator.notification.template.code.new.reg.sub=RPR_RPV_SUC_EMAIL_SUB
regproc.packet.validator.notification.template.code.lost.uin.email=RPR_LPV_SUC_EMAIL
regproc.packet.validator.notification.template.code.lost.uin.sms=RPR_LPV_SUC_SMS
regproc.packet.validator.notification.template.code.lost.uin.sub=RPR_LPV_SUC_EMAIL_SUB
regproc.packet.validator.notification.template.code.reprint.uin.email=RPR_PPV_SUC_EMAIL
regproc.packet.validator.notification.template.code.reprint.uin.sms=RPR_PPV_SUC_SMS
regproc.packet.validator.notification.template.code.reprint.uin.sub=RPR_PPV_SUC_EMAIL_SUB
regproc.packet.validator.notification.template.code.activate.email=RPR_APV_SUC_EMAIL
regproc.packet.validator.notification.template.code.activate.sms=RPR_APV_SUC_SMS
regproc.packet.validator.notification.template.code.activate.sub=RPR_APV_SUC_EMAIL_SUB
regproc.packet.validator.notification.template.code.deactivate.email=RPR_DPV_SUC_EMAIL
regproc.packet.validator.notification.template.code.deactivate.sms=RPR_DPV_SUC_SMS
regproc.packet.validator.notification.template.code.deactivate.sub=RPR_DPV_SUC_EMAIL_SUB
regproc.packet.validator.notification.template.code.uin.update.email=RPR_UPV_SUC_EMAIL
regproc.packet.validator.notification.template.code.uin.update.sms=RPR_UPV_SUC_SMS
regproc.packet.validator.notification.template.code.uin.update.sub=RPR_UPV_SUC_EMAIL_SUB
regproc.packet.validator.notification.template.code.resident.update.email=RPR_RUPV_SUC_EMAIL
regproc.packet.validator.notification.template.code.resident.update.sms=RPR_RUPV_SUC_SMS
regproc.packet.validator.notification.template.code.resident.update.sub=RPR_RUPV_SUC_EMAIL_SUB
regproc.packet.validator.notification.template.code.technical.issue.email=RPR_TEC_ISSUE_EMAIL
regproc.packet.validator.notification.template.code.technical.issue.sms=RPR_TEC_ISSUE_SMS
regproc.packet.validator.notification.template.code.technical.issue.sub=RPR_TEC_ISSUE_EMAIL_SUB

#---------------------------------------packet-classifier-stage------------------------------------#

mosip.regproc.packet.classifier.eventbus.kafka.commit.type=single
mosip.regproc.packet.classifier.eventbus.kafka.max.poll.records=100
mosip.regproc.packet.classifier.eventbus.kafka.poll.frequency=100
mosip.regproc.packet.classifier.eventbus.kafka.group.id=packet-classifier-stage
mosip.regproc.packet.classifier.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.packet.classifier.server.port=8092
mosip.regproc.packet.classifier.eventbus.port=5724
mosip.regproc.packet.classifier.server.servlet.path=/registrationprocessor/v1/packetclassifier

# List of tag generator that should be run on every packet
# Available tag generators MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics,MosipIDObjectDataAvailability
mosip.regproc.packet.classifier.tag-generators=MosipIDObjectFields,MosipMetaInfo,MosipAgeGroup,MosipSupervisorApprovalStatus,MosipExceptionBiometrics,MosipIDObjectDataAvailability
# The tag value that will be used by default when the packet does not have value for the tag field
mosip.regproc.packet.classifier.tagging.not-available-tag-value=--TAG_VALUE_NOT_AVAILABLE--
# These field names should be as in keys of registraion-processor-identity.json file Identity segment
# and should have proper default source configured
mosip.regproc.packet.classifier.tagging.idobjectfields.mapping-field-names=gender,residenceStatus
# The tag name that will be prefixed with every idobjectfield tags
mosip.regproc.packet.classifier.tagging.idobjectfields.tag-name-prefix=ID_OBJECT-
# The tag name that will be prefixed with every metainfo operationsData tags
mosip.regproc.packet.classifier.tagging.metainfo.operationsdata.tag-name-prefix=META_INFO-OPERATIONS_DATA-
# The tag name that will be prefixed with every metainfo metaData tags
mosip.regproc.packet.classifier.tagging.metainfo.metadata.tag-name-prefix=META_INFO-META_DATA-
# The tag name that will be prefixed with every metainfo capturedRegisteredDevices tags 
mosip.regproc.packet.classifier.tagging.metainfo.capturedregistereddevices.tag-name-prefix=META_INFO-CAPTURED_REGISTERED_DEVICES-
# The labels on metainfo.operationsData array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.operationsdata.tag-labels=officerId,supervisorId
# The labels on metainfo.metaData array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.metadata.tag-labels=centerId
# The serial numbers of devices type on metainfo.capturedRegisteredDevices array that needs to be tagged
mosip.regproc.packet.classifier.tagging.metainfo.capturedregistereddevices.device-types=Face,Finger
# Tag name that will be used while tagging age group
mosip.regproc.packet.classifier.tagging.agegroup.tag-name=AGE_GROUP
# Below age ranges map should contain proper age group name and age range, any overlap of the age 
# range will result in a random behaviour of tagging. In range, upper and lower values are inclusive.
mosip.regproc.packet.classifier.tagging.agegroup.ranges={'INFANT':'0-5','MINOR':'6-17','ADULT':'18-200'}
# Tag name that will be used while tagging supervisor approval status
mosip.regproc.packet.classifier.tagging.supervisorapprovalstatus.tag-name=SUPERVISOR_APPROVAL_STATUS
# Tag name that will be used while tagging exception biometrics
mosip.regproc.packet.classifier.tagging.exceptionbiometrics.tag-name=EXCEPTION_BIOMETRICS
# This mapping will contain the short words for each missing biometrics, the values will used for concatenating in the tags
mosip.regproc.packet.classifier.tagging.exceptionbiometrics.bio-value-mapping={'leftLittle':'LL','leftRing':'LR','leftMiddle':'LM','leftIndex':'LI','leftThumb':'LT','rightLittle':'RL','rightRing':'RR','rightMiddle':'RM','rightIndex':'RI','rightThumb':'RT','leftEye':'LE','rightEye':'RE'}
# The keys of this map will used as tag names and values should be single field or a boolean mvel expression 
# continaing multiple fields. These field names in expression should be as in keys of registraion-processor-identity.json 
# file Identity segment and should have proper default source configured
mosip.regproc.packet.classifier.tagging.idobject-data-availability.availability-expression-map={'INTRODUCER_AVAILABILITY':'introducerUIN || introducerRID || introducerVID'}

#--------------------------------------quality-classifier-stage------------------------------------#

mosip.regproc.quality.classifier.eventbus.kafka.commit.type=single
mosip.regproc.quality.classifier.eventbus.kafka.max.poll.records=100
mosip.regproc.quality.classifier.eventbus.kafka.poll.frequency=100
mosip.regproc.quality.classifier.eventbus.kafka.group.id=quality-classifier-stage
mosip.regproc.quality.classifier.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.quality.classifier.server.port=9072
mosip.regproc.quality.classifier.eventbus.port=5727
mosip.regproc.quality.classifier.server.servlet.path=/registrationprocessor/v1/qualityclassifier

# Below quality ranges map should contain proper quality group name and quality range, any overlap of the quality 
# range will result in a random behaviour of tagging. In range, upper and lower values are inclusive.
mosip.regproc.quality.classifier.tagging.quality.ranges={'Poor':'0-29','Average':'30-69','Good':'70-100'}

# Quality Tag Prefix
mosip.regproc.quality.classifier.tagging.quality.prefix=Biometric_Quality-
# The tag value that will be used by default when the packet does not have biometrics
mosip.regproc.quality.classifier.tagging.quality.biometric-not-available-tag-value=--Biometrics-Not-Available--
# modality arrays that needs to be tagged
mosip.regproc.quality.classifier.tagging.quality.modalities=Iris,Finger,Face

#---------------------------------------cmd-validator-stage----------------------------------------#

mosip.regproc.cmd-validator.eventbus.kafka.commit.type=single
mosip.regproc.cmd-validator.eventbus.kafka.max.poll.records=100
mosip.regproc.cmd-validator.eventbus.kafka.poll.frequency=100
mosip.regproc.cmd-validator.eventbus.kafka.group.id=cmd-validator-stage
mosip.regproc.cmd-validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.cmd-validator.server.port=8089
mosip.regproc.cmd-validator.eventbus.port=5716
mosip.regproc.cmd-validator.server.servlet.path=/registrationprocessor/v1/cmdvalidator

# Processes to enable center validation, for processes not mentioned here center validation will be skipped
mosip.regproc.cmd-validator.center-validation.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION
# Processes to enable machine validation, for processes not mentioned here machine validation will be skipped
mosip.regproc.cmd-validator.machine-validation.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION
# Processes to enable device validation, for processes not mentioned here device validation will be skipped
mosip.regproc.cmd-validator.device-validation.processes=NEW,UPDATE,LOST,BIOMETRIC_CORRECTION

# To enable or disable the Center working hour validation
mosip.regproc.cmd-validator.working-hour-validation-required=true

# To enable/disable trust validation of a digital id signature of a device
mosip.regproc.cmd-validator.device.disable-trust-validation=false
# Maximum duration in minutes permissible between digital id timestamp and packet creation time
mosip.regproc.cmd-validator.device.allowed-digital-id-timestamp-variation=30
# Timestamp format followed in digital id and biometrics payload
mosip.regproc.cmd-validator.device.digital-id-timestamp-format=yyyy-MM-dd'T'HH:mm:ss'Z'

#---------------------------------------operator-validator-stage-----------------------------------#

mosip.regproc.operator-validator.eventbus.kafka.commit.type=single
mosip.regproc.operator-validator.eventbus.kafka.max.poll.records=100
mosip.regproc.operator-validator.eventbus.kafka.poll.frequency=100
mosip.regproc.operator-validator.eventbus.kafka.group.id=operator-validator-stage
mosip.regproc.operator-validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.operator-validator.server.port=8093
mosip.regproc.operator-validator.eventbus.port=5723
mosip.regproc.operator-validator.server.servlet.path=/registrationprocessor/v1/operatorvalidator

#--------------------------------------supervisor-validator-stage----------------------------------#

mosip.regproc.supervisor-validator.eventbus.kafka.commit.type=single
mosip.regproc.supervisor-validator.eventbus.kafka.max.poll.records=100
mosip.regproc.supervisor-validator.eventbus.kafka.poll.frequency=100
mosip.regproc.supervisor-validator.eventbus.kafka.group.id=supervisor-validator-stage
mosip.regproc.supervisor-validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.supervisor-validator.server.port=8094
mosip.regproc.supervisor-validator.eventbus.port=5725
mosip.regproc.supervisor-validator.server.servlet.path=/registrationprocessor/v1/supervisorvalidator

#--------------------------------------introducer-validator-stage----------------------------------#

mosip.regproc.introducer-validator.eventbus.kafka.commit.type=single
mosip.regproc.introducer-validator.eventbus.kafka.max.poll.records=100
mosip.regproc.introducer-validator.eventbus.kafka.poll.frequency=100
mosip.regproc.introducer-validator.eventbus.kafka.group.id=introducer-validator-stage
mosip.regproc.introducer-validator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.introducer-validator.server.port=8095
mosip.regproc.introducer-validator.eventbus.port=5728
mosip.regproc.introducer-validator.server.servlet.path=/registrationprocessor/v1/introducervalidator

#-------------------------------------------demo-dedupe-stage--------------------------------------#

mosip.regproc.demo.dedupe.eventbus.kafka.commit.type=single
mosip.regproc.demo.dedupe.eventbus.kafka.max.poll.records=100
mosip.regproc.demo.dedupe.eventbus.kafka.poll.frequency=100
mosip.regproc.demo.dedupe.eventbus.kafka.group.id=demo-dedupe-stage
mosip.regproc.demo.dedupe.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.demo.dedupe.server.port=8091
mosip.regproc.demo.dedupe.eventbus.port=5717
mosip.regproc.demo.dedupe.server.servlet.path=/registrationprocessor/v1/demodedupe

#configuration parameter to disable or enable Demographic Deduplication 
mosip.registration.processor.demographic.deduplication.enable=true

#-----------------------------------------abis-handler-stage---------------------------------------#

mosip.regproc.abis.handler.eventbus.kafka.commit.type=single
mosip.regproc.abis.handler.eventbus.kafka.max.poll.records=100
mosip.regproc.abis.handler.eventbus.kafka.poll.frequency=100
mosip.regproc.abis.handler.eventbus.kafka.group.id=abis-handler-stage
mosip.regproc.abis.handler.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.abis.handler.server.port=9071
mosip.regproc.abis.handler.eventbus.port=5726
mosip.regproc.abis.handler.server.servlet.path=/registrationprocessor/v1/abishandler
mosip.regproc.abis.handler.biometric-modalities-segments-mapping.INFANT={'Face':{'Face'}}
mosip.regproc.abis.handler.biometric-modalities-segments-mapping.MINOR={'Finger': {'Left Thumb','Left LittleFinger','Left IndexFinger','Left MiddleFinger','Left RingFinger','Right Thumb','Right LittleFinger','Right IndexFinger','Right MiddleFinger','Right RingFinger'},'Iris':{'Left','Right'},'Face':{'Face'}}
mosip.regproc.abis.handler.biometric-modalities-segments-mapping.ADULT={'Finger': {'Left Thumb','Left LittleFinger','Left IndexFinger','Left MiddleFinger','Left RingFinger','Right Thumb','Right LittleFinger','Right IndexFinger','Right MiddleFinger','Right RingFinger'},'Iris':{'Left','Right'},'Face':{'Face'}}
mosip.regproc.abis.handler.biometric-segments-exceptions-mapping={'Left Thumb' : 'leftThumb','Right Thumb' : 'rightThumb','Left MiddleFinger' : 'leftMiddle','Left RingFinger' : 'leftRing','Left LittleFinger' : 'leftLittle','Left IndexFinger' : 'leftIndex','Right MiddleFinger' : 'rightMiddle','Right RingFinger' : 'rightRing','Right LittleFinger' : 'rightLittle','Right IndexFinger' : 'rightIndex','Left' : 'leftEye','Right' : 'rightEye','Face' : 'face'}

registration.processor.policy.id=mpolicy-default-abis
registration.processor.subscriber.id=mpartner-default-abis

#------------------------------------------bio-dedupe-stage----------------------------------------#

mosip.regproc.bio.dedupe.eventbus.kafka.commit.type=single
mosip.regproc.bio.dedupe.eventbus.kafka.max.poll.records=100
mosip.regproc.bio.dedupe.eventbus.kafka.poll.frequency=100
mosip.regproc.bio.dedupe.eventbus.kafka.group.id=bio-dedupe-stage
mosip.regproc.bio.dedupe.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.bio.dedupe.server.port=9096
mosip.regproc.bio.dedupe.eventbus.port=5718
mosip.regproc.bio.dedupe.server.servlet.path=/registrationprocessor/v1/biodedupe

#Maximum abis records to be fetched at a time
registration.processor.abis.maxResults=30
#Dummy Tag for face in cbeff file
registration.processor.abis.targetFPIR=30
# supported 'byte' and 'text format
activemq.message.format=text
# Buffer time above the expiry for all queues to allow reprocessing (in seconds)
registration.processor.bio.dedupe.reprocess.buffer.time=900

#----------------------------------------manual-verification-stage---------------------------------#

mosip.regproc.manual.verification.eventbus.kafka.commit.type=single
mosip.regproc.manual.verification.eventbus.kafka.max.poll.records=100
mosip.regproc.manual.verification.eventbus.kafka.poll.frequency=100
mosip.regproc.manual.verification.eventbus.kafka.group.id=manual-verification-stage
mosip.regproc.manual.verification.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.manual.verification.server.servlet.path=/registrationprocessor/v1/manualverification
mosip.regproc.manual.verification.server.port=8084
mosip.regproc.manual.verification.eventbus.port=5720

#Manual verification assignment request Id
mosip.registration.processor.manual.verification.assignment.id=mosip.manual.verification.assignment
#Manual verification decision request Id
mosip.registration.processor.manual.verification.decision.id=mosip.manual.verification.decision
#Manual verification biometric request Id
mosip.registration.processor.manual.verification.biometric.id=mosip.manual.verification.biometric
#Manual verification demographic request Id
mosip.registration.processor.manual.verification.demographic.id=mosip.manual.verification.demographic
#Manual verification packetinfo request Id
mosip.registration.processor.manual.verification.packetinfo.id=mosip.manual.verification.packetinfo

#Manual verification queue message expiry in seconds, if given 0 then message will never expire
registration.processor.queue.manualverification.request.messageTTL=5400
# Buffer time above the expiry queue to allow reprocessing (in seconds)
registration.processor.manual.verification.reprocess.buffer.time=900

registration.processor.manual.adjudication.policy.id=mpolicy-default-adjudication
registration.processor.manual.adjudication.subscriber.id=mpartner-default-adjudication

#----------------------------------------uin-generator-stage---------------------------------------#

mosip.regproc.uin.generator.eventbus.kafka.commit.type=single
mosip.regproc.uin.generator.eventbus.kafka.max.poll.records=100
mosip.regproc.uin.generator.eventbus.kafka.poll.frequency=100
mosip.regproc.uin.generator.eventbus.kafka.group.id=uin-generator-stage
mosip.regproc.uin.generator.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.uin.generator.server.port=8099
mosip.regproc.uin.generator.eventbus.port=5719
mosip.regproc.uin.generator.server.servlet.path=/registrationprocessor/v1/uin-generator

#Idrepo create request Id
registration.processor.id.repo.create=mosip.id.create
#Idrepo read request Id
registration.processor.id.repo.read=mosip.id.read
#Idrepo update request Id
registration.processor.id.repo.update=mosip.id.update
#Idrepo vidType request Id
registration.processor.id.repo.vidType=Perpetual
#Idrepo generate request Id
registration.processor.id.repo.generate=mosip.vid.create
#Idrepo vid version
registration.processor.id.repo.vidVersion=v1

# default priority for correction packets
# To define priority use below stage names. For example, field 'gender' has priority in uin-generator-stage. The key for uin-generator-stage is 'uingenerator'. So the key would be 'packetmanager.provider.uingenerator.gender'
# packetreceiver,packetuploader,packetvalidator,qualitychecker,osivalidator,demodedupe,classification,biodedupe,bioauth,manualverification,uingenerator,messagesender
packetmanager.provider.uingenerator.lastName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.gender=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.city=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.modeOfClaim=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cregion=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.postalCode=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cprovince=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.suffix=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.bloodType=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.referenceIdentityNumber=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Finger]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Iris]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.individualBiometrics[Face]=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.province=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine4=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.zone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine3=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine2=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.caddressLine1=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine1=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine2=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.residenceStatus=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine3=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.addressLine4=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.email=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.czone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.dateOfBirth=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.cpostalCode=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.ccity=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.firstName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.IDSchemaVersion=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.phone=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.registrationType=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.middleName=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.UIN=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.region=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.maritalStatus=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianUIN=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.parentOrGuardianRID=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfAddress=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfDateOfBirth=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfIdentity=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfRelationship=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT
packetmanager.provider.uingenerator.proofOfException=source:CNIE\/process:CORRECTION,source:REGISTRATION_CLIENT\/process:NEW|UPDATE|LOST,source:RESIDENT\/process:ACTIVATED|DEACTIVATED|RES_UPDATE|RES_REPRINT

#--------------------------------------abis-middle-ware-stage--------------------------------------#

mosip.regproc.abis.middleware.eventbus.kafka.commit.type=single
mosip.regproc.abis.middleware.eventbus.kafka.max.poll.records=100
mosip.regproc.abis.middleware.eventbus.kafka.poll.frequency=100
mosip.regproc.abis.middleware.eventbus.kafka.group.id=abis-middle-ware-stage
mosip.regproc.abis.middleware.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.abis.middleware.server.port=8091
mosip.regproc.abis.middleware.eventbus.port=5888
mosip.regproc.abis.middleware.server.servlet.path=/registrationprocessor/v1/abismiddleware

#--------------------------------------biometric-extraction-ware-stage--------------------------------------#

mosip.regproc.biometric.extraction.eventbus.kafka.commit.type=single
mosip.regproc.biometric.extraction.eventbus.kafka.max.poll.records=100
mosip.regproc.biometric.extraction.eventbus.kafka.poll.frequency=100
mosip.regproc.biometric.extraction.eventbus.kafka.group.id=biometric-extraction-stage

biometric.extraction.default.partner.policy.ids=[{'partnerId':'mpartner-default-auth','policyId':'mpolicy-default-auth'},{'partnerId':'mpartner-default-print','policyId':'mpolicy-default-print'},{'partnerId':'mpartner-default-print','policyId':'mpolicy-default-qrcode'},{'partnerId':'mpartner-default-print','policyId':'mpolicy-default-euin'}]

mosip.regproc.biometric.extraction.server.port=9181
mosip.regproc.biometric.extraction.eventbus.port=5727
mosip.regproc.biometric.extraction.server.servlet.path=/registrationprocessor/v1/biometricextraction
mosip.regproc.biometric.extraction.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#--------------------------------------finalization-ware-stage--------------------------------------#

mosip.regproc.finalization.eventbus.kafka.commit.type=single
mosip.regproc.finalization.eventbus.kafka.max.poll.records=100
mosip.regproc.finalization.eventbus.kafka.poll.frequency=100
mosip.regproc.finalization.eventbus.kafka.group.id=finalization-stage

mosip.regproc.finalization.server.port=9182
mosip.regproc.finalization.eventbus.port=5728
mosip.regproc.finalization.server.servlet.path=/registrationprocessor/v1/finalization
mosip.regproc.finalization.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

#------------------------------------biometric-authentication-stage--------------------------------#

mosip.regproc.biometric.authentication.eventbus.kafka.commit.type=single
mosip.regproc.biometric.authentication.eventbus.kafka.max.poll.records=100
mosip.regproc.biometric.authentication.eventbus.kafka.poll.frequency=100
mosip.regproc.biometric.authentication.eventbus.kafka.group.id=biometric-authentication-stage
mosip.regproc.biometric.authentication.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.biometric.authentication.server.port=8020
mosip.regproc.biometric.authentication.eventbus.port=5777
mosip.regproc.biometric.authentication.server.servlet.path=/registrationprocessor/v1/bioauth

#--------------------------------------message-sender-stage----------------------------------------#

mosip.regproc.message.sender.eventbus.kafka.commit.type=single
mosip.regproc.message.sender.eventbus.kafka.max.poll.records=100
mosip.regproc.message.sender.eventbus.kafka.poll.frequency=100
mosip.regproc.message.sender.eventbus.kafka.group.id=message-sender-stage
mosip.regproc.message.sender.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.message.sender.server.port=8088
mosip.regproc.message.sender.eventbus.port=5721
mosip.regproc.message.sender.server.servlet.path=/registrationprocessor/v1/sender-stage

registration.processor.notification.emails=

#Email subjects for success & failure scenario
#Uin generated subject
registration.processor.uin.generated.subject=UIN Generated
#Duplicate Uin subject
registration.processor.duplicate.uin.subject=Registration Failed because you have already Registered
#Applicant re-register subject
registration.processor.reregister.subject=Re-Register because there was a Technical Issue
#Uin activated subject
registration.processor.uin.activated.subject=Uin is activated successfully
#Uin deactivated subject
registration.processor.uin.deactivated.subject=Uin is deactivated
#Uin details updated subject
registration.processor.updated.subject=UIN Details Updated

#SMS notification request id
mosip.registration.processor.sms.id=mosip.sms.send

#-------------------------------------------printing-stage-----------------------------------------#

mosip.regproc.printing.eventbus.kafka.commit.type=single
mosip.regproc.printing.eventbus.kafka.max.poll.records=100
mosip.regproc.printing.eventbus.kafka.poll.frequency=100
mosip.regproc.printing.eventbus.kafka.group.id=printing-stage
mosip.regproc.printing.message.expiry-time-limit=${mosip.regproc.common.stage.message.expiry-time-limit}

mosip.regproc.printing.server.port=8099
mosip.regproc.printing.server.servlet.path=/registrationprocessor/v1/print-stage
mosip.regproc.printing.eventbus.port=5722

mosip.registration.processor.credentialtype=euin
mosip.registration.processor.encrypt=false
mosip.registration.processor.issuer=mpartner-default-print
mosip.registration.processor.credential.request.service.id=mosip.credential.request.generator

####################################################################################################
#----------------------------- NOT USED PROPERTIES (To be removed later) ---------------------------
####################################################################################################


#Location to store the file which is consumed from the print and postal queue
registration.processor.PRINT_POSTAL_SERVICE=/home/ftp1/PRINIT_POSTAL_SERVICE

#-----packet-utility----------
# The known packet sources. Should be set as all fieldCategory present in idschema
# (NOTE : if fieldCategory is set as pvt then the source should be id)
registration.processor.sourcepackets=id,evidence,optional
# The mandatory default source packet.(In default configuration this is thd id packet)
packet.default.source=id
# the default schema field cagegory (ex - private)
schema.default.fieldCategory=pvt,none
# The IDSchemaVersion used to create packets in reg-proc
IDSchema.Version=0.1

# preferred language setting
mosip.preferred-language.enabled=false

#---------registration-processor-camel-bridge------------

#Url to cluster manager to enable this stage for joining the cluster in secure zone
cluster.manager.file.name=hazelcast_mz.xml

#-------------------------------------- DMZ Properties --------------------------------------------#

#---------Packet Receiver Stage------------
#Maximum file size to be upload from packet receiver
registration.processor.max.file.size=5

#Packet Receiver request Id
mosip.registration.processor.packet.id=mosip.registration.packet

## multiple SDK providers configurations
# mosip.biometric.sdk.providers.finger.<vendorId>.classname=<value> is supported
# mosip.biometric.sdk.providers.finger.<vendorId>.version=<value> is to define SDK API version
# mosip.biometric.sdk.providers.finger.<vendorId>.args=<value> is SDK implementation class consturctor args - comma separated
# mosip.biometric.sdk.providers.finger.<vendorId>.threshold=<value> is Quality threshold used by SDK to match modality
# mosip.biometric.sdk.providers.finger.<vendorId>.<key1>=<value1> is also supported, this will be passed as initparams
mosip.biometric.sdk.providers.finger.mockvendor.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
mosip.biometric.sdk.providers.finger.mockvendor.version=0.9
mosip.biometric.sdk.providers.finger.mockvendor.args=
mosip.biometric.sdk.providers.iris.mockvendor.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
mosip.biometric.sdk.providers.iris.mockvendor.version=0.9
mosip.biometric.sdk.providers.iris.mockvendor.args=
mosip.biometric.sdk.providers.face.mockvendor.classname=io.mosip.biosdk.client.impl.spec_1_0.Client_V_1_0
mosip.biometric.sdk.providers.face.mockvendor.version=0.9
mosip.biometric.sdk.providers.face.mockvendor.args=
